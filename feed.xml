<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Felipe Sere</title>
    <description>My path to craftsmanship.</description>
    <link>http://felipesere.github.io//</link>
    <atom:link href="http://felipesere.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 09 Feb 2017 15:17:53 +0000</pubDate>
    <lastBuildDate>Thu, 09 Feb 2017 15:17:53 +0000</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Contemplating the Backlog</title>
        <description>&lt;p&gt;We were recently talking about the backlog of user stories for a project on the near horizon. We wanted to create an exemplary backlog with meaningful stories that would allow the team succeed. The backlog should also show the less technical side of the organisation that they needn’t deliver all functionality in one large push. When the question of which story to tackle first came up, “do the most important thing” didn’t feel good enough.&lt;/p&gt;

&lt;p&gt;The user story backlog is linear so that the team has an obvious point from where to pull in the next piece of work. Yet there are many aspects that make a story important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It has (real or perceived) value to customer, which we will harvest when the story is completed.&lt;/li&gt;
  &lt;li&gt;It carries risk to the business, the customer, and the development team itself.&lt;/li&gt;
  &lt;li&gt;It unlocks knowledge, which enables and impacts future stories.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this in mind we can compare the stories along those three axes and come up with different ways of sorting our backlog, which in turn reflect upon our business priorities and project phase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/contemplating-user-stories.jpg&quot; alt=&quot;Contemplating user stories&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reward-driven-backlog&quot;&gt;Reward driven backlog&lt;/h3&gt;

&lt;p&gt;Sorting user stories by their real or perceived value is a good initial strategy, if recuperating our costs is a priority. This kind of optimization works for teams that are short on cash and may not even get through the entire backlog. The moment we deliver a story that adds significant benefit to our customers, we become a valued partner. In environments that are driven by reducing costs, delivering some piece of functionality that reduces the costs or increases the value, may result in compounding effects for the bottom line.&lt;/p&gt;

&lt;p&gt;For the purpose of comparing user stories, the value of a user story can be roughly approximated. Should no real data be available, a back-of-the-napkin calculation or an educated guess is enough to decide between two stories most of the time.&lt;/p&gt;

&lt;h3 id=&quot;risk-driven-backlog&quot;&gt;Risk driven backlog&lt;/h3&gt;

&lt;p&gt;More often than not reward is tied to risk. Adding a feature that might benefit 80% of our user base also means that we run the risk of disgruntling 80% of our users. Think of a “Todo” application, where we decide to add a smart sorting algorithm that intelligently rearranges the todos by priority and due date. If it works, every user will get a pretty smart todo list. If we introduce a flaw, we are damaging the core functionality of our app for every user.&lt;/p&gt;

&lt;p&gt;So a user story “sorting” strategy is to work on stories which minimize risk by having a low overall impact. Those stories are a safe place to experiment and get to grips with the domain that we are working in. This is a decent strategy for well-established systems that have a steady, loyal customer base. Or systems that are relied upon by other production systems. It also involves a significant time and financial investment as the less risky stories might not be the most rewarding.&lt;/p&gt;

&lt;h3 id=&quot;knowledge-driven-backlog&quot;&gt;Knowledge driven backlog&lt;/h3&gt;

&lt;p&gt;All projects will have aspects to them that the team has not encountered before. You may need to connect bespoke systems that were not designed to do so. Or you may need to process something completely different than before. Stories that enable you to go and find (or discard!) potential solutions are not directly tied to customer value. They are valuable to the team and create opportunities to unlock further stories.&lt;/p&gt;

&lt;p&gt;If you are treading in uncharted territory prioritising stories that will unlock further stories becomes a winning strategy. Such stories are sometimes called ‘spikes’, though I prefer the term ‘experiments’. Experiments emphasise that we are walking into unknown territory and that an answer might be “we pushed it far, but we couldn’t make it work in time”. Even cutting corners is OK with an experiment, as long there is a lesson to be learnt.&lt;/p&gt;

&lt;h3 id=&quot;a-blend&quot;&gt;A Blend&lt;/h3&gt;

&lt;p&gt;All three of the above approaches are valid, and as usual the key is in finding the right blend for the current backlog. As the project progresses through different phases, a different aspect of a user story will have more pull. Teams in the early development stages will probably benefit the most from a few knowledge stories to find their way through the technology and domain. As the project begins to take shape, recuperating some of the costs and building trust with stakeholders will likely mean a shift towards reward stories. Finally, as the project reaches maturity, a more careful risk-driven approach might be better suited. Granted that at any moment the focus can shift. Understanding that stories can fall into any (and maybe even many) of the categories gives us a tool to compare and better understand our backlog.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Extra&lt;/strong&gt;: If you want to read more about different phases of a team/project and how that affects estimates,teams, and money and may others, take a look at &lt;a href=&quot;https://www.facebook.com/notes/kent-beck/comparing-explore-expand-and-extract-topics-in-3x/1241983035834558&quot;&gt;Kent Becks 3X&lt;/a&gt; and how that is evolving.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Feb 2017 22:03:35 +0000</pubDate>
        <link>http://felipesere.github.io//2017/contemplating-the-backlog/</link>
        <guid isPermaLink="true">http://felipesere.github.io//2017/contemplating-the-backlog/</guid>
        
        
        <category>team</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Planning In Uncertainty</title>
        <description>&lt;p&gt;Over the last year, I have attended 3 or 4 Release Train Planning (RTP) meetings. In these meetings, the entire team came together and planned out the next release. A release is roughly a three month period, made up of 6 two-week iterations. The way these meetings are run is that the objective of a given release is introduced by a business representative and teams break down the work into stories which are mapped against the 6 iterations. All the teams taking part in the release then come back together to present their plan, synchronize it with the other teams and commit to results and dates.&lt;/p&gt;

&lt;p&gt;The rigidity of this ritual struck me as odd. When the mics were off, people spoke about these plans and the fact that they always change anyway as the deadline approaches. No real surprise there. The odd thing was that everybody went along, put effort into a plan, re-jigged it to line up with another teams plan, and then committed to delivering this fine master-piece of Gantt charts. All in a 3-day effort by about 50 or 60 people.&lt;/p&gt;

&lt;p&gt;Somebody somewhere must have left those RTP feeling happy and confident in the plans. But knowing that future plans have an increasing chance of not coming to fruition, that time spent planning could have been spent elsewhere.&lt;/p&gt;

&lt;p&gt;Uncertainty is an important factor when planning. Not only is there uncertainty on how to execute a given task, but there is also uncertainty on whether to execute it at all.
What needs to happen before it, or whether it needs to be re-thought. Let’s put the uncertainty on a graph against the time we intend to execute on the plans:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/doubt-and-plans.jpg&quot; alt=&quot;Plans made for the distant future have more uncertainty&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Plans made for the next couple of days are fairly certain, while plans for things months from now are pretty much anyone’s guess.  Think about the last 5-6 months of your last project: requirements changed, deadlines moved, earlier tasks unearthed a new set of challenges or unexpected opportunities. All of this will put your perfectly drawn Gantt chart out of whack.&lt;/p&gt;

&lt;p&gt;Let’s return to the RTP, where we planned our next 4-5 months of development, cramming each iteration with stories until they are full. The image below shows a fictional team board, with the necessary stories for the next 6 iterations, overlayed by a red line showing the increasing doubts as plans are further in the future:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/doubt-story-board.PNG&quot; alt=&quot;Stories within a  release, with the doubt overlayed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The color coding should show how at risk these stories are. From the top left (urgent and critical) in blue to the bottom right (neither urgent nor important) in red. The yellow stories are somewhere in between. An interesting observation is that the top story in iteration 3 is blue, while the third and fourth stories in iteration 2 are yellow. The blue story in iteration 3 is going to be the highest priority in that iteration, while the other two yellow ones are a low priority, meaning they could be dropped or changed. Now keep in mind, we are still planning ahead. We have not completed any of the stories.&lt;/p&gt;

&lt;p&gt;The uncertainty lines help us in deciding whether there is value in planning stories underneath it. It helps us focus on the right now of the important tasks, rather than spending precious time planing future stories, let alone future unimportant stories.&lt;/p&gt;

&lt;p&gt;So how should we plan? Many, many, many small plans for a near-future horizon. Concentrating the entire planning into three days for 4 months is a recipe for disaster. There is no wiggle-room. No space for learning. No space for adjusting. Too many wheels are in motion and too many interdependencies are in play.&lt;/p&gt;

&lt;p&gt;To make the effect of many smaller plannings clearer, let’s see how they fare with the uncertainty. The next image shows three simplified views of the board, once before the first, second, and third iteration.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/multiple-iterations-planning.jpg&quot; alt=&quot;Smaller, more frequent iteration plannings.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the planning horizon was kept short: next iteration and a story or two for the iterations after that. Only the current iteration was packed with stories. All other iterations were left with some space, giving the team some breathing room to react to new information. Important stories or features which the team had to address at some point (important, but not urgent) were put on the board, but their iterations definitely not filled.&lt;/p&gt;

&lt;p&gt;It is tempting to go for the &lt;em&gt;big plan&lt;/em&gt;. To lay out all the cards on the table. To get everybody together, and for once get everybody to agree to a plan &lt;em&gt;and stick to it&lt;/em&gt;. Sadly, the underlying closed-world assumptions (we know all the facts in advance) rarely holds true. Smaller, more frequent plans give you the necessary freedom to change direction. To adjust and react to new events. I urge you to give it a try. The beauty of trying this idea: if it doesn’t work out for you, you have at most lost an iteration or two, instead of an entire release. Isn’t that something worth trying?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Experts Disclaimer:&lt;/strong&gt; If you your first thought after reading this is “We don’t do any RTPs at all!” and planning iterations in advance is not something you would recommend, I agree. For some teams, getting from half-yearly or quarterly releases down to fortnightly iterations is already an achievement. This article is intended for readers beginning their journey to a more continuous delivery of value.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Jan 2017 07:37:57 +0000</pubDate>
        <link>http://felipesere.github.io//2017/planning-in-uncertainty/</link>
        <guid isPermaLink="true">http://felipesere.github.io//2017/planning-in-uncertainty/</guid>
        
        
        <category>team</category>
        
        <category>agile</category>
        
      </item>
    
      <item>
        <title>Hashtag Impostor Syndrome</title>
        <description>&lt;p&gt;I came to a realization today:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I feel greater impostor syndrome on Twitter than at home or the workplace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me fill in some context. In the last weeks, we have begun training an employee to become a “craftsmanship coach”. The idea is that he will work with us to learn values of craftsmanship.&lt;/p&gt;

&lt;p&gt;Once our engagement has ended, he will be the driving factor pushing the company forward. As part of that &lt;em&gt;apprenticeship&lt;/em&gt; that employee will be writing code, giving talks and writing blogs. That prompted me to resurrect my personal blog and try to engage more with the internet. I intend to do so by writing on this blog, going to meetups and events, and post my ideas on Twitter.&lt;/p&gt;

&lt;p&gt;As I was about to tweet out a sketch of an idea about ‘iteration planning’ it hit me: I was afraid of putting a prominent #hashtag on it. I was unsure whether my idea was right, new, or good. What would people think? Who am I to Big-Important-Hashtags on my little tweet and claim relevance? Here is the tweet:&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Sketch on &amp;quot;Why &lt;a href=&quot;https://twitter.com/hashtag/planning?src=hash&quot;&gt;#planning&lt;/a&gt; beyond a horizon adds little value&amp;quot;. &lt;a href=&quot;https://twitter.com/hashtag/openlearning?src=hash&quot;&gt;#openlearning&lt;/a&gt; cc &lt;a href=&quot;https://twitter.com/AntonyMarcano&quot;&gt;@AntonyMarcano&lt;/a&gt; &lt;a href=&quot;https://t.co/Cj0Mr2t2VV&quot;&gt;pic.twitter.com/Cj0Mr2t2VV&lt;/a&gt;&lt;/p&gt;&amp;mdash; Felipe Sere (@felipesere) &lt;a href=&quot;https://twitter.com/felipesere/status/824393103968706560&quot;&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;I decided to tweet with a #hashtag which a friend of mine had mentioned in a similar tweet of his: #openlearning. That #hashtag made me feel easier about the tweet. It was a learning experience. If someone looked the tweet, took the time to reply to it, then I’d sure get even more value and learning from it. My idea did not need to be perfect to share it on the internet. The input from other people would help me refine it and allow me to strike a conversation with peers.&lt;/p&gt;

&lt;p&gt;My next &lt;a href=&quot;https://twitter.com/search?q=%23openlearning&amp;amp;src=typd&quot;&gt;#openlearning&lt;/a&gt; tweet might gain more traction and the  discussion around it will be fruitful.&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 20:23:35 +0000</pubDate>
        <link>http://felipesere.github.io//2017/hashtag-impostor-syndrome/</link>
        <guid isPermaLink="true">http://felipesere.github.io//2017/hashtag-impostor-syndrome/</guid>
        
        <category>personal</category>
        
        
      </item>
    
      <item>
        <title>Fast feedback with RSpec and rerun</title>
        <description>&lt;p&gt;Recently &lt;a href=&quot;https://twitter.com/CharlotteBRF/status/824251562428076034&quot;&gt;this&lt;/a&gt; tweet scrolled across my time-line about using &lt;code class=&quot;highlighter-rouge&quot;&gt;--fail-fast&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Super blog from &lt;a href=&quot;https://twitter.com/nikeshashar&quot;&gt;@nikeshashar&lt;/a&gt; on failing fast with &lt;a href=&quot;https://twitter.com/hashtag/RSpec?src=hash&quot;&gt;#RSpec&lt;/a&gt; &lt;a href=&quot;https://t.co/PZF3tXulay&quot;&gt;https://t.co/PZF3tXulay&lt;/a&gt; ..all those &lt;a href=&quot;https://twitter.com/codewars&quot;&gt;@codewars&lt;/a&gt;  tests feel worth it! cc &lt;a href=&quot;https://twitter.com/felipesere&quot;&gt;@felipesere&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr Charlotte Fereday (@CharlotteBRF) &lt;a href=&quot;https://twitter.com/CharlotteBRF/status/824251562428076034&quot;&gt;January 25, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;--fail-fast&lt;/code&gt; with RSpec means the very first failure that RSpec encounters will halt the entire suite.
Passing tests give a sense achievement, but failing tests show where more work is needed.
Furthermore, getting many cascading failures (indicative of a potential design issue!) are distracting and overwhelming.
Using &lt;code class=&quot;highlighter-rouge&quot;&gt;--fail-fast&lt;/code&gt; limits the amount of failures we need to concentrate at any given time.&lt;/p&gt;

&lt;p&gt;But there is more.
Switching between your editor and terminal, followed by running &lt;code class=&quot;highlighter-rouge&quot;&gt;rspec --fail-fast&lt;/code&gt; (potentailly hitting up-arrow multiple times) adds
an additional context switch and is distracting. I catch myself “over-tabbing” to my twitter timeline in Chrome every once in a while, just saying.
What if we didn’t have to manually run our tests?
Enter &lt;a href=&quot;https://github.com/alexch/rerun&quot;&gt;rerun&lt;/a&gt;.
Install it with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   gem install rerun
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and then run&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  rerun -cx &lt;span class=&quot;s2&quot;&gt;&quot;rspec --fail-fast
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s decompose that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-c will clear the screen, so you are not distracted by previous successes/failures&lt;/li&gt;
  &lt;li&gt;-x expect rspec to ‘exit’, meaning we know its a one-shot command and not a server (that needs to halted)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are a couple of ways to improve this even further.
For example, if you install &lt;a href=&quot;https://github.com/julienXX/terminal-notifier&quot;&gt;terminal-notifier&lt;/a&gt; then you can have notifications
pop up in the notification center. This is nice if you work in Sublime or Atom and you feel like you’d loose too much screen space
by having a command line open in parallel.&lt;/p&gt;

&lt;p&gt;Another cool parameter is &lt;code class=&quot;highlighter-rouge&quot;&gt;-p &quot;**/*.something&quot;&lt;/code&gt; which lets you watch for certain files.
Rerun is setup to watch for common files (Ruby, SCSS, JS, and some others),
but it is happy to work with any pattern you want.&lt;/p&gt;

&lt;p&gt;So there you go, have &lt;code class=&quot;highlighter-rouge&quot;&gt;rerun&lt;/code&gt; run your tests for you!&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Jan 2017 20:31:36 +0000</pubDate>
        <link>http://felipesere.github.io//2017/fast-feedback-with-rspec-and-rerun/</link>
        <guid isPermaLink="true">http://felipesere.github.io//2017/fast-feedback-with-rspec-and-rerun/</guid>
        
        <category>testing</category>
        
        
      </item>
    
      <item>
        <title>Walking down the path again</title>
        <description>&lt;p&gt;I’ve decided to start blogging again.
Not about anything in particular or for any particular audience.
Just for me to gather my thoughts on things around code and craftsmanship.&lt;/p&gt;

&lt;p&gt;Stay tuned.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jan 2016 13:04:23 +0000</pubDate>
        <link>http://felipesere.github.io//2016/walking-down-the-path-again/</link>
        <guid isPermaLink="true">http://felipesere.github.io//2016/walking-down-the-path-again/</guid>
        
        <category>personal</category>
        
        
        <category>personal</category>
        
      </item>
    
  </channel>
</rss>
